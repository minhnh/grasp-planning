#!/usr/bin/env python2
import os
import yaml
import rospy
from actionlib import SimpleActionClient
from rospy import Subscriber
from std_msgs.msg import String as StringMsg

from mdr_pickup_action.msg import PickupAction, PickupGoal
from mcr_perception_msgs.msg import DetectSceneAction, DetectSceneGoal, Object as ObjectMsg


REQUIRED_GRASP_CONFIGS = ['maximum_grasp_reach', 'minimum_grasp_height', 'maximum_grasp_number', 'graspable_objects',
                          'gripper_link_offset', 'maximum_workspace_distance']


class PoseEstimateGraspPlanner(object):
    _timeout = None             # type: int
    _event_sub = None           # type: Subscriber
    _max_grasp_num = None       # type: int
    _max_workspace_dist = None  # type: float
    _gripper_link_offset = None # type: float
    _min_grasp_height = None    # type: float
    _max_grasp_reach = None     # type: float
    _allowed_objects = None     # type: list
    _pickup_client = None       # type: SimpleActionClient
    _detect_client = None       # type: SimpleActionClient

    def __init__(self, detect_action_name, pickup_action_name, grasp_config, timeout=5):

        for config_name in REQUIRED_GRASP_CONFIGS:
            if config_name not in grasp_config:
                raise RuntimeError('required configuration not specified in config file: ' + config_name)

        self._allowed_objects = grasp_config['graspable_objects']
        self._max_grasp_reach = grasp_config['maximum_grasp_reach']
        self._min_grasp_height = grasp_config['minimum_grasp_height']
        self._gripper_link_offset = grasp_config['gripper_link_offset']
        self._max_workspace_dist = grasp_config['maximum_workspace_distance']
        self._max_grasp_num = grasp_config['maximum_grasp_number']

        self._detect_client = SimpleActionClient(detect_action_name, DetectSceneAction)
        rospy.loginfo("waiting for object detection action server: " + detect_action_name)
        if not self._detect_client.wait_for_server(rospy.Duration(timeout)):
            raise RuntimeError("failed to wait for pickup action server after {0} second(s)".format(timeout))

        if self._max_grasp_num > 0:
            self._pickup_client = SimpleActionClient(pickup_action_name, PickupAction)
            rospy.loginfo("waiting for pickup action server: " + pickup_action_name)
            if not self._pickup_client.wait_for_server(rospy.Duration(timeout)):
                raise RuntimeError("failed to wait for pickup action server after {0} second(s)".format(timeout))
        else:
            self._pickup_client = None

        self._event_sub = rospy.Subscriber("~event_in", StringMsg, self._event_in_cb)
        self._timeout = timeout
        rospy.loginfo('waiting for trigger on topic: ' + self._event_sub.resolved_name)

    def _event_in_cb(self, _):
        rospy.loginfo('detecting objects')
        self._detect_client.send_goal(DetectSceneGoal())
        if not self._detect_client.wait_for_result(rospy.Duration(self._timeout)):
            rospy.logerr('timeout exceeded waiting for object detection action server')
            return

        result = self._detect_client.get_result()
        grasp_exec_count = 0
        for plane in result.planes:
            for obj in plane.object_list.objects:
                if not self._filter_detected_objects(obj):
                    continue

                rospy.loginfo('object position: x={0:.3f}, y={1:.3f}, z={2:.3f}'
                              .format(obj.pose.pose.position.x, obj.pose.pose.position.y, obj.pose.pose.position.z))

                grasp_exec_count += 1
                if grasp_exec_count > self._max_grasp_num:
                    rospy.loginfo('exceeded number of allowed grasps ({0}), will not send action goal'
                                  .format(self._max_grasp_num))
                    continue

                rospy.loginfo('sending a pickup action goal')
                goal = PickupGoal()
                goal.pose = obj.pose
                self._pickup_client.send_goal(goal)
                self._pickup_client.wait_for_result()
                rospy.loginfo(self._pickup_client.get_result())

        rospy.loginfo('finished processing {0} objects'.format(grasp_exec_count))

    def _filter_detected_objects(self, obj):
        """
        :type obj: ObjectMsg
        """
        allowed = False
        for allowed_label in self._allowed_objects:
            if allowed_label in obj.name:
                allowed = True
                break

        if not allowed:
            rospy.logwarn('skipping disallowed object: %s', obj.name)
            return False

        if obj.pose.header.frame_id != '/base_link':
            rospy.logwarn('unexpected frame for object pose: ' + obj.pose.header.frame_id)

        if obj.pose.pose.position.x > self._max_workspace_dist:
            rospy.logwarn('skipping far away object')
            return False

        if obj.pose.pose.position.x > self._max_grasp_reach:
            obj.pose.pose.position.x = self._max_grasp_reach
            rospy.logwarn('readjusting x coord to %.3f', obj.pose.pose.position.x)

        # readjust x further from object
        obj.pose.pose.position.x -= self._gripper_link_offset
        if obj.pose.pose.position.z < self._min_grasp_height:
            obj.pose.pose.position.z = self._min_grasp_height
            rospy.logwarn('readjusting z coord to %.3f', obj.pose.pose.position.z)

        return True


if __name__ == '__main__':
    rospy.init_node('grasp_planner_action_client')
    # get detection and pickup action server names
    param_detect_action_name = rospy.get_param('~detection_action_name', None)
    if not param_detect_action_name:
        raise ValueError('no detection action server specified')

    param_pickup_action_name = rospy.get_param('~pickup_action_name', None)
    if not param_pickup_action_name:
        raise ValueError('no pickup action server specified')

    # get grasp configuration file
    param_grasp_config_file = rospy.get_param('~grasp_config_file', None)
    if not param_grasp_config_file:
        raise ValueError('"~grasp_config_file" not specified')
    if not os.path.exists(param_grasp_config_file):
        raise ValueError('"~grasp_config_file" file does not exist: ' + param_grasp_config_file)
    with open(param_grasp_config_file, 'r') as infile:
        grasp_configurations = yaml.load(infile)

    _ = PoseEstimateGraspPlanner(param_detect_action_name, param_pickup_action_name, grasp_configurations)

    rospy.spin()
